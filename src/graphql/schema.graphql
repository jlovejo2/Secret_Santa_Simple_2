type Query {
	allTodos: [TodoMVC!]!
	Todo(todoId: ID!): TodoMVC
	allUsers: [User!]!
}

type Mutation {
	createTodo(description: String!): TodoMVC!
	updateTodo(todoId: ID!, data: UpdateTodoInput!): TodoMVC
	sendPicks(input: SendPicksInput!): String
	createGroup(input: [CreateGroupInput!]!): Group
}

input UpdateTodoInput {
	description: String
	completed: Boolean
}

input CreateGroupInput {
	first_name: String!
	last_name: String!
	email: String!
	secret_pick: String!
}

input SendPicksInput {
	GroupId: Int!
}

type TodoMVC @entity {
	todoId: ID! @id
	completed: Boolean! @column
	description: String! @column
}

type User @entity {
	userId: ID! @id
	first_name: String! @column
	last_name: String! @column
	email: String! @column
	groups: [Group] @column
}

type Group @entity {
	groupId: ID! @id
	members: [GroupMember] @column
}

type GroupMember {
	first_name: String!
	last_name: String!
	email: String!
	secret_pick: String!
}
